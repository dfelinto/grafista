doctype html
html
  head
    meta(charset="utf-8")

    link(href="{{ url_for('static', filename='assets/css/nv.d3.min.css') }}", rel="stylesheet", type="text/css")
    script(src="{{ url_for('static', filename='assets/js/d3.min.js') }}")
    script(src="{{ url_for('static', filename='assets/js/nv.d3.min.js') }}")

    style.
      text {
        font: 12px sans-serif;
      }
      svg {
        display: block;
      }
      html, body, svg {
        margin: 0px;
        padding: 0px;
        height: 100%;
        width: 100%;
      }
  body
    svg#chart1
    script.
      function parseSamples(data) {
          var processedArray = [];
          var parsedData = data;
          var samplesArray = parsedData['samples'];
          var arrayLength = samplesArray.length;
          for (var i = 0; i < arrayLength; i++) {
              var date = new Date(samplesArray[i][0]);
              processedArray.push({x: date.getTime(), y: samplesArray[i][1]})
          }
          // console.log(processedArray);
          return processedArray;
      }

      // Wrapping in nv.addGraph allows for '0 timeout render', stores rendered charts in nv.graphs, and may do more in the future... it's NOT required
      var chart;

      d3.json('/series/total_sold', function(data) {
        nv.addGraph(function () {
            chart = nv.models.lineChart()
                .options({
                    duration: 300,
                    useInteractiveGuideline: true
                })
            ;

            // chart sub-models (ie. xAxis, yAxis, etc) when accessed directly, return themselves, not the parent chart, so need to chain separately
            chart.xAxis
                .axisLabel("Time")
                .tickFormat(function (d) {
                    // return d3.format('d')(d);
                    return d3.time.format('%x')(new Date(d))
                })
                .staggerLabels(true)
            ;


            chart.yAxis
                .axisLabel("Subscribers")
                .tickFormat(function (d) {
                    if (d == null) {
                        return 'N/A';
                    }

                    return d3.format('d')(d);
                })
            ;

            data = [
                {
                    area: true,
                    values: parseSamples(data),
                    key: "Active Subscribers",
                    color: "#7dc2fb",
                    fillOpacity: .1
                }
            ];
            d3.select('#chart1').append('svg')
                .datum(data)
                .call(chart);

            nv.utils.windowResize(chart.update);

            return chart;
        });

      });